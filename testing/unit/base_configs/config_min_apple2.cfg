# cut down version of apple2, including header for emulator to load as an apple-single binary


FEATURES {
    STARTADDRESS: default = $0803;
}
SYMBOLS {
    __EXEHDR__:    type = import;
    __FILETYPE__:  type = weak, value = $0006; # ProDOS file type
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
    __HIMEM__:     type = weak, value = $9600; # Presumed RAM end
    __LCADDR__:    type = weak, value = $D400; # Behind quit code
    __LCSIZE__:    type = weak, value = $0C00; # Rest of bank two
}
MEMORY {
    ZP:     file = "", define = yes, start = $0080,        size = $001A;
    HEADER: file = %O, define = yes, start = %S - $003A,   size = $003A;
    MAIN:   file = %O, define = yes, start = %S,           size = __HIMEM__ - %S;
    BSS:    file = "",               start = __ONCE_RUN__, size = __HIMEM__ - __STACKSIZE__ - __ONCE_RUN__;
    LC:     file = "", define = yes, start = __LCADDR__,   size = __LCSIZE__;
    LOW:    file = "", define = yes, start = $0800,        size = %S - $0800;
    V_RST:  file = "", start = $FFFC, size = $0002, define = no;
}
SEGMENTS {
    ZEROPAGE: load = ZP,             type = zp;
    EXEHDR:   load = HEADER,         type = ro,  optional = yes;
    STARTUP:  load = MAIN,           type = ro;
    LOWCODE:  load = MAIN,           type = ro,  optional = yes;
    CODE:     load = MAIN,           type = ro;
    RODATA:   load = MAIN,           type = ro;
    DATA:     load = MAIN,           type = rw;
    INIT:     load = MAIN,           type = rw;  # uninitialized, but reserves output space
    ONCE:     load = MAIN,           type = ro,  define   = yes;
    LC:       load = MAIN, run = LC, type = ro,  optional = yes;
    BSS:      load = BSS,            type = bss, define   = yes;
    LOWBSS:   load = LOW,            type = bss, optional = yes;
    V_RESET:  load = V_RST,          type = rw,  define   = yes;
}
