FEATURES {
    STARTADDRESS: default = $2000;
}
SYMBOLS {
    __STACKSIZE__:       type = weak, value = $0800; # 2k stack
}
MEMORY {
    #; setup a basic zeropage memory of 82-FF. We could use it all as we're in a test emulator, but this is useful if we include ROMs etc
    ZP:   file = "", start = $0082, size = $007E, define = yes;

    #; everything goes in 1 large chunk at the moment from 2000 up to FF00-stack, software stack will start at MAIN_END + STACKSIZE
    MAIN: file = %O, start = %S,    size = $FF00 - __STACKSIZE__ - %S, define = yes;

    #; the system vectors
    V_RST: file = %O, start = $FFFC, size = $0002, define = no;
}
FILES {
    # ; generates the FFFF header and RUNAD/INITAD headers
    %O: format = atari;
}
FORMATS {
    atari:
#;    runad  = _main;        #; ignore start completly, go straight to _main
      runad  = start;        #; alternatively, do a full cc65 startup, so we can initialise the system outside our test runners and main code under test

}

# ; not all segments are used by our applications directly
# ; but are useful if other functions in CC65 are pulled into tests that need them
# ; uncomment ONCE and RODATA if you really need them
SEGMENTS {
    ZEROPAGE:  load = ZP,    type = zp;
    STARTUP:   load = MAIN,  type = ro,  define = yes;
#   ONCE:      load = MAIN,  type = ro,                 optional = yes;
    CODE:      load = MAIN,  type = ro,  define = yes, optional = no;
    RODATA:    load = MAIN,  type = ro;
    DATA:      load = MAIN,  type = rw;
#   INIT:      load = MAIN,  type = bss, define = yes,  optional = yes;
    BSS:       load = MAIN,  type = bss, define = yes;
    V_RESET:   load = V_RST, type = ro,  define = yes;
}