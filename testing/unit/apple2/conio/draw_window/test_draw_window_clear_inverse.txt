marker $$Window Drawing Visual Test (Assembly Version)$$

memory load apple "${BINARY_PATH}"
symbols load "${SYMBOLS_PATH}"

// allow 'init' to work on apple2
memory write $__V_RESET_LOAD__ $start

disable trace_logging
run init until CP = $start_test
enable trace_logging

registers set cycle_count = 0
run while CP != $window1_end
;memory show $screen_memory 240 40

// Unfortunately, there's no easy way to test inverse chars, as they don't fall in the
// ascii printable range so we use \xAA format for those chars

; 'Menu' in inverse is 8D E5 EE F5
assert $screen_memory ~ "\
                                        \
  {%\x8d\xe5\xee\xf5%}                              \
  {      }                              \
  {      }                              \
  {~~~~~~}                              \
                                        " $$Window1: Small window with 'Menu' title$$
registers show cycle_count

run while CP != $window2_end
;memory show $screen_memory 360 40

; 'Settings' in inverse is 93 E5 F4 F4 E9 EE E7 F3
assert $screen_memory ~ "\
                                        \
  {%\x8d\xe5\xee\xf5%}                              \
  {      }                              \
  {      }{%\x93\xe5\xf4\xf4\xe9\xee\xe7\xf3%}                  \
  {~~~~~~}{          }                  \
          {          }                  \
          {          }                  \
          {~~~~~~~~~~}                  \
                                        " $$Window2: Medium window with 'Settings' title$$
registers show cycle_count

run while CP != $window3_end
;memory show $screen_memory 560 40

; 'File Browser' in lower case is 86 E9 EC E5 A0 82 F2 EF F7 F3 E5 F2
assert $screen_memory ~ "\
                                        \
  {%\x8d\xe5\xee\xf5%}                              \
  {      }                              \
  {      }{%\x93\xe5\xf4\xf4\xe9\xee\xe7\xf3%}                  \
  {~~~~~~}{          }                  \
          {          }                  \
          {          }                  \
          {~~~~~~~~~~}                  \
     {%%\x86\xE9\xEC\xE5\xA0\x82\xF2\xEF\xF7\xF3\xE5\xF2%%}                 \
     {                }                 \
     {                }                 \
     {                }                 \
     {                }                 \
     {~~~~~~~~~~~~~~~~}                 \
                                        " $$Window3: Large window with 'File Browser' title$$
registers show cycle_count

run while CP != $window4_end
;memory show $screen_memory 560 40

; 'Overlap' in lower case is 8F F6 E5 F2 EC E1 F0
assert $screen_memory ~ "\
                                        \
  {%\x8d\xe5\xee\xf5%}                              \
  {      }                              \
  {      }{%\x93\xe5\xf4\xf4\xe9\xee\xe7\xf3%}                  \
  {~{%\x8F\xF6\xE5\xF2\xEC\xE1\xF0%%}     }                  \
    {          }     }                  \
    {          }     }                  \
    {          }~~~~~}                  \
    {          }\xF7\xF3\xE5\xF2%%}                 \
    {~~~~~~~~~~}      }                 \
     {                }                 \
     {                }                 \
     {                }                 \
     {~~~~~~~~~~~~~~~~}                 \
                                        " $$Window4: Overlapping windows$$
registers show cycle_count
